import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from __future__ import print_function

import collections
from mpl_toolkits.mplot3d import Axes3D
from IPython import display
import sklearn
import sklearn.manifold
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()
tf.logging.set_verbosity(tf.logging.ERROR)

from google.colab import drive
drive.mount('/content/drive')

#os.chdir('/content/drive/My Drive/CA4015/Assignment 4/Assignment_4')   # Daniel
#os.chdir('/content/drive/My Drive/CA4015/Assignment_4/') # John
os.chdir('/content/drive/My Drive/College - 4th Year/CA4015_AdvancedML/Assignment_4') # Liam

%%capture
# Add some convenience functions to Pandas DataFrame.
pd.options.display.max_rows = 10
pd.options.display.float_format = '{:.3f}'.format
def mask(df, key, function):
  """Returns a filtered dataframe, by applying function to key"""
  return df[function(df[key])]

def flatten_cols(df):
  df.columns = [' '.join(col).strip() for col in df.columns.values]
  return df

pd.DataFrame.mask = mask
pd.DataFrame.flatten_cols = flatten_cols

# Install Altair and activate its colab renderer.
print("Installing Altair...")
!pip install git+git://github.com/altair-viz/altair.git
import altair as alt
alt.data_transformers.enable('default', max_rows=None)
alt.renderers.enable('colab')
print("Done installing Altair.")

# Install spreadsheets and import authentication module.
USER_RATINGS = False
!pip install --upgrade -q gspread
from google.colab import auth
import gspread
from oauth2client.client import GoogleCredentials

artists = pd.read_csv("data/last.fm/artists.dat", delimiter="\t")
artists_cols = ['id', 'name', 'url', 'pictureURL']
artists.head()

u_t_artists = pd.read_csv("data/last.fm/user_taggedartists.dat", delimiter="\t")
u_t_artists_cols = ['userID', 'artistID', 'tagID', 'day', 'month', 'year']
u_t_artists.head()

uta_timestamps = pd.read_csv("data/last.fm/user_taggedartists-timestamps.dat",delimiter="\t")
uta_timestamps_cols = ['userID', 'artistID', 'tagID', 'timestamp']
uta_timestamps.head()

user_artists = pd.read_csv("data/last.fm/user_artists.dat",delimiter="\t")
user_artists_cols = ['userID', 'artistID', 'weight']
user_artists.head()

user_friends = pd.read_csv("data/last.fm/user_friends.dat",delimiter="\t")
user_friends_cols = ['userID', 'friendID']
user_friends.head()

user_friends.info()

tags = pd.read_csv("data/last.fm/tags.dat",delimiter="\t", encoding='latin-1')
tags_cols = ['tagID', 'tagValue']
tags.head()

print("user_artists: ", user_artists.isnull().values.any())
print("user_friends: ", user_friends.isnull().values.any())
print("u_t_artists: ", u_t_artists.isnull().values.any())
print("uta_timestamps: ",uta_timestamps.isnull().values.any())
print("artists: ", artists.isnull().values.any())
print("tags: ", tags.isnull().values.any())

artists.isnull().any()

user_artists["userID"] = user_artists["userID"].apply(lambda x: str(x-2))
user_artists["artistID"] = user_artists["artistID"].apply(lambda x: str(x-1))

artists["id"] = artists["id"].apply(lambda x: str(x-1))

u_t_artists["userID"] = u_t_artists["userID"].apply(lambda x: str(x-2))
u_t_artists["artistID"] = u_t_artists["artistID"].apply(lambda x: str(x-1))
u_t_artists["tagID"] = u_t_artists["tagID"].apply(lambda x: str(x-1))

uta_timestamps["userID"] = uta_timestamps["userID"].apply(lambda x: str(x-2))
uta_timestamps["artistID"] = uta_timestamps["artistID"].apply(lambda x: str(x-1))
uta_timestamps["tagID"] = uta_timestamps["tagID"].apply(lambda x: str(x-1))

tags["tagID"] = tags["tagID"].apply(lambda x: str(x-1))

user_friends["userID"] = user_friends["userID"].apply(lambda x: str(x-2))
user_friends["friendID"] = user_friends["friendID"].apply(lambda x: str(x-2))

print('Unique userID list: ', user_artists.userID.unique())
print('Unique artistID list: ', user_artists.artistID.unique())

user_artists.describe(include=[np.object])

tags.describe(include=[np.object])

#Don't run this cell again
"""
user_artists.to_csv('data_clean/user_artists.csv')
user_friends.to_csv('data_clean/user_friends.csv')
u_t_artists.to_csv('data_clean/u_t_artists.csv')
uta_timestamps.to_csv('data_clean/uta_timestamps.csv')
artists.to_csv('data_clean/artists.csv')
tags.to_csv('data_clean/tags.csv')
"""

merged_uat = pd.merge(u_t_artists, tags, on = 'tagID', how= 'left')
"""
merged_uat.to_csv('data_clean/merged_user_artist_tags.csv')
"""


tag_counts = merged_uat[['userID', 'tagValue']].groupby('tagValue').count().reset_index()
top_tags = tag_counts.sort_values('userID', ascending=False).rename(columns={'userID':'count'}).head(20)
top_tags

ax = sns.barplot(x="tagValue", y="count", data=top_tags)
ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")
plt.tight_layout()
plt.show()

user_artists.head()

ax = sns.displot(data = user_artists, x = 'weight', bins = 20)
ax.set_xticklabels(rotation=40)
plt.show()

sns.boxplot(data=user_artists, x="weight")

user_artists.weight.describe()

std_user_artists = user_artists.copy()
cols = list(std_user_artists.columns)
cols.remove('userID')
cols.remove('artistID')
#user_artists[cols]
for col in cols:
    col_zscore = col + '_zscore'
    std_user_artists[col_zscore] = (std_user_artists[col] - std_user_artists[col].mean())/std_user_artists[col].std(ddof=0)
std_user_artists

std_user_artists.weight_zscore.describe()

user_artists[user_artists["weight"] > 1500]["weight"] = 1500

indexes = user_artists[user_artists["weight"] > 1500].index

# Set the value of all of these weights to 1500
user_artists.iloc[indexes,2] = 1500

sns.boxplot(data=user_artists, x="weight")

user_artists['alt_weight'] = float

min_weight = min(user_artists.weight)
max_weight = max(user_artists.weight)

for i in range(0,len(user_artists)):
  user_artists.alt_weight.iloc[i] = np.interp(user_artists.weight.iloc[i],[min_weight,max_weight],[1,5])

ax = sns.displot(data = user_artists, x = 'alt_weight', bins = 20)

# user_artists.to_csv('data_clean/new_user_artists.csv', index=False)


